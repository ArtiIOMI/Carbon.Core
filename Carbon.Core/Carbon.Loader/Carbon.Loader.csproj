<Project Sdk="Microsoft.NET.Sdk" DefaultTargets="Build">
	<PropertyGroup>
		<!-- General build information -->
		<Configurations>Debug;Release;ReleaseUnix;DebugUnix</Configurations>
		<CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
		<Deterministic>true</Deterministic>
		<FileAlignment>512</FileAlignment>
		<OutputType>Library</OutputType>
		<Platforms>x64</Platforms>
		<PlatformTarget>x64</PlatformTarget>
		<ProjectGuid>{3ACED109-8348-4608-9AF4-DC9B30421A8A}</ProjectGuid>
		<TargetFrameworks>net48</TargetFrameworks>

		<AllowedReferenceRelatedFileExtensions>.pdb</AllowedReferenceRelatedFileExtensions>
		<AppendRuntimeIdentifierToOutputPath>false</AppendRuntimeIdentifierToOutputPath>
		<AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
		<SatelliteResourceLanguages>en</SatelliteResourceLanguages>
	</PropertyGroup>

	<PropertyGroup>
		<!-- User defined properties -->
		<Product>Carbon.Loader</Product>
		<AssemblyName>$(Product)</AssemblyName>

		<Company>Carbon Community</Company>
		<Copyright>Copyright © 2022 Carbon Community</Copyright>
		<PackageProjectUrl>https://discord.gg/eXPcNKK4yd</PackageProjectUrl>
		<RepositoryUrl>https://github.com/Carbon-Modding/Carbon.Core</RepositoryUrl>
		<Description>A very lightweight version of Oxide, all working within Harmony's environment.</Description>
	</PropertyGroup>

	<PropertyGroup>
		<!-- Automatically generated properties -->
		<AssemblyVersion>$(Version)</AssemblyVersion>
		<FileVersion>$(VersionPrefix)</FileVersion>
		<RootNamespace>$(MSBuildProjectName.Replace(" ", "_")).Core</RootNamespace>
		<Version>1.$([System.DateTime]::UtcNow.ToString('yy.ddMM')).10</Version>
		<VersionPrefix>$([System.DateTime]::UtcNow.ToString("yyyy.MM.dd.HHmm"))</VersionPrefix>
		<VersionSuffix>$(Configuration)</VersionSuffix>

		<Configuration Condition="'$(Configuration)' == ''">Debug</Configuration>
		<Platform Condition="'$(Platform)' == ''">x64</Platform>
	</PropertyGroup>

	<Choose>
		<When Condition="Exists('.gitag')">
			<PropertyGroup>
				<InformationalVersion>$(VersionPrefix)-$(VersionSuffix)$([System.IO.File]::ReadAllText('$(SolutionDir)$(Product)\.gitag').Trim())</InformationalVersion>
			</PropertyGroup>
		</When>
		<Otherwise>
			<PropertyGroup>
				<InformationalVersion>$(VersionPrefix)-$(VersionSuffix)</InformationalVersion>
			</PropertyGroup>
		</Otherwise>
	</Choose>

	<Choose>
		<When Condition="Exists('.rndasm') AND $(Configuration.Contains('Debug'))">
			<PropertyGroup>
				<AssemblyName>$([System.IO.File]::ReadAllText('$(SolutionDir)$(Product)\.rndasm').Trim())</AssemblyName>
			</PropertyGroup>
		</When>
		<Otherwise>
			<PropertyGroup>
				<AssemblyName>$(Product)</AssemblyName>
			</PropertyGroup>
		</Otherwise>
	</Choose>

	<Choose>
		<When Condition="$(Configuration.Contains('Release'))">
			<PropertyGroup>
				<DebugType>none</DebugType>
				<DefineConstants>$(DefineConstants)</DefineConstants>
				<Optimize>true</Optimize>
				<OutputPath>bin\$(Configuration)\</OutputPath>
				<TreatWarningsAsErrors>true</TreatWarningsAsErrors>
			</PropertyGroup>
		</When>
		<Otherwise>
			<PropertyGroup>
				<DebugType>embedded</DebugType>
				<DefineConstants>DEBUG;UNITY_ASSERTIONS;$(DefineConstants)</DefineConstants>
				<OutputPath>bin\$(Configuration)\</OutputPath>
				<TreatWarningsAsErrors>false</TreatWarningsAsErrors>
			</PropertyGroup>
		</Otherwise>
	</Choose>

	<Choose>
		<When Condition="$(Configuration.Contains('Unix'))">
			<PropertyGroup>
				<DefineConstants>UNIX;$(DefineConstants)</DefineConstants>
			</PropertyGroup>

			<ItemGroup>
				<!-- Facepunch game files for Linux -->
				<Reference Include="..\..\Rust\linux\RustDedicated_Data\Managed\*.dll">
					<Private>false</Private>
				</Reference>
			</ItemGroup>
		</When>
		<Otherwise>
			<PropertyGroup>
				<DefineConstants>WIN;$(DefineConstants)</DefineConstants>
			</PropertyGroup>

			<ItemGroup>
				<!-- Facepunch game files for Windows -->
				<Reference Include="..\..\Rust\windows\RustDedicated_Data\Managed\*.dll">
					<Private>false</Private>
				</Reference>
			</ItemGroup>
		</Otherwise>
	</Choose>

	<ItemGroup>
		<!-- System libs -->
		<Reference Include="Microsoft.CSharp" />
		<Reference Include="System.Buffers" />
		<Reference Include="System.Collections.Immutable" />
		<Reference Include="System.Core" />
		<Reference Include="System.Data.SQLite" />
		<Reference Include="System.Data" />
		<Reference Include="System.Drawing.Design" />
		<Reference Include="System.Drawing" />
		<Reference Include="System.IO.Compression.FileSystem" />
		<Reference Include="System.Memory" />
		<Reference Include="System.Numerics.Vectors" />
		<Reference Include="System.Reflection.Metadata" />
		<Reference Include="System.Runtime.CompilerServices.Unsafe" />
		<Reference Include="System.Text.Encoding.CodePages" />
		<Reference Include="System.Threading.Tasks.Extensions" />
		<Reference Include="System.Xml" />
		<Reference Include="System" />
	</ItemGroup>

	<ItemGroup>
		<!-- External resources -->
		<Reference Include="..\..\Tools\HarmonyLib\Harmony\bin\Release\net48\1Harmony.dll"/>
	</ItemGroup>

	<ItemGroup>
		<!-- Assembly weaver -->
		<PackageReference Include="Costura.Fody" Version="5.7.0">
			<PrivateAssets>all</PrivateAssets>
		</PackageReference>
	</ItemGroup>


	<!-- ============================ -->
	<!--  CLEAN ADDITONAL FILES TASK  -->
	<!-- ============================ -->
	<Target Name="CleanOutputPath" AfterTargets="Clean">
		<Message Text="&gt;&gt; Removing files from $(OutputPath)" Importance="high" />
		<Delete Files="$(OutputPath)$(Product).dll" />
		<Delete Files="$(OutputPath)$(Product)-*.dll" />
	</Target>

	<!-- =============================== -->
	<!--  GENERATE RANDOM ASM NAME TASK  -->
	<!-- =============================== -->
	<Target Name="RandomASMNameGenerator" AfterTargets="_GenerateRestoreProjectSpec">
		<PropertyGroup>
			<RandomASM>$(Product)-$([System.DateTime]::UtcNow.ToString('HHmmfff'))</RandomASM>
		</PropertyGroup>

		<Exec Command="git branch --show-current" ConsoleToMSBuild="true" StandardOutputImportance="low">
			<Output TaskParameter="ConsoleOutput" PropertyName="GitBranch" />
		</Exec>

		<Exec Command="git rev-parse --short HEAD" ConsoleToMSBuild="true" StandardOutputImportance="low">
			<Output TaskParameter="ConsoleOutput" PropertyName="GitCommitHash" />
		</Exec>

		<PropertyGroup>
			<Gitag>-$(GitBranch)-$(GitCommitHash)</Gitag>
		</PropertyGroup>

		<WriteLinesToFile File="$(SolutionDir)$(Product)\.gitag" Overwrite="true" Lines="$(Gitag)" />
		<WriteLinesToFile File="$(SolutionDir)$(Product)\.rndasm" Overwrite="true" Lines="$(RandomASM)" />
	</Target>

	<!-- ========================== -->
	<!--  PRINT BUILD CONTEXT TASK  -->
	<!-- ========================== -->
	<Target Name="CustomBeforeCompile" BeforeTargets="BeforeCompile">
		<Message Text="&gt;&gt; Product: $(Product)" Importance="high" />
		<Message Text="&gt;&gt; Runtime: $(MSBuildRuntimeType)" Importance="high" />
		<Message Text="&gt;&gt; Build ID: $(InformationalVersion)" Importance="high" />
		<Message Text="&gt;&gt; Build Target: $(Configuration)|$(Platform)" Importance="high" />
		<Message Text="&gt;&gt; Build Assembly Name: $(AssemblyName)" Importance="high" />
		<Message Text="&gt;&gt; Build Constants: $(DefineConstants)" Importance="high" />
	</Target>

	<!-- ================================ -->
	<!--  RENAME THE BUILD ARTIFACT TASK  -->
	<!-- ================================ -->
	<Target Name="RenameBuildOutput" AfterTargets="PostBuildEvent" Condition="$(Configuration.Contains('Debug'))">
		<Message Text="&gt;&gt; Rename the build artifact from '$(OutputPath)$(TargetName).dll' to '$(OutputPath)$(Product).dll'" Importance="high" />
		<Copy SourceFiles="$(OutputPath)$(TargetName).dll" DestinationFiles="$(OutputPath)$(Product).dll" />
		<Delete Files="$(OutputPath)$(TargetName).dll" />
	</Target>

	<!-- ========================== -->
	<!--  CLEAN OUTPUT FOLDER TASK  -->
	<!-- ========================== -->
	<Target Name="CleanOutputFolder" AfterTargets="RenameBuildOutput">
		<Message Text="&gt;&gt; Cleaning output folder" Importance="high" />

		<ItemGroup>
			<!-- <FilesToDelete Include="$(OutputPath)*.dll" Exclude="$(OutputPath)$(Product).dll" /> -->
			<FilesToDelete Include="$(OutputPath)0Harmony.dll" />
			<FilesToDelete Include="$(OutputPath)Assembly-*.dll" />
			<FilesToDelete Include="$(OutputPath)Facepunch.*.dll" />
			<FilesToDelete Include="$(OutputPath)Fleck.dll" />
			<FilesToDelete Include="$(OutputPath)Facepunch.*.dll" />
			<FilesToDelete Include="$(OutputPath)Rust.*.dll" />
			<FilesToDelete Include="$(OutputPath)UnityEngine*.dll" />
		</ItemGroup>

		<Delete Files="@(FilesToDelete)" />
	</Target>
</Project>